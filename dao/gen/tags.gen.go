// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"blog/model/entity"
)

func newTags(db *gorm.DB, opts ...gen.DOOption) tags {
	_tags := tags{}

	_tags.tagsDo.UseDB(db, opts...)
	_tags.tagsDo.UseModel(&entity.Tags{})

	tableName := _tags.tagsDo.TableName()
	_tags.ALL = field.NewAsterisk(tableName)
	_tags.ID = field.NewUint64(tableName, "id")
	_tags.Name = field.NewString(tableName, "name")
	_tags.Logo = field.NewString(tableName, "logo")
	_tags.Color = field.NewString(tableName, "color")

	_tags.fillFieldMap()

	return _tags
}

type tags struct {
	tagsDo

	ALL   field.Asterisk
	ID    field.Uint64
	Name  field.String // 标签名
	Logo  field.String // LOGO
	Color field.String // 颜色

	fieldMap map[string]field.Expr
}

func (t tags) Table(newTableName string) *tags {
	t.tagsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tags) As(alias string) *tags {
	t.tagsDo.DO = *(t.tagsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tags) updateTableName(table string) *tags {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Logo = field.NewString(table, "logo")
	t.Color = field.NewString(table, "color")

	t.fillFieldMap()

	return t
}

func (t *tags) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tags) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["logo"] = t.Logo
	t.fieldMap["color"] = t.Color
}

func (t tags) clone(db *gorm.DB) tags {
	t.tagsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tags) replaceDB(db *gorm.DB) tags {
	t.tagsDo.ReplaceDB(db)
	return t
}

type tagsDo struct{ gen.DO }

type ITagsDo interface {
	gen.SubQuery
	Debug() ITagsDo
	WithContext(ctx context.Context) ITagsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITagsDo
	WriteDB() ITagsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITagsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITagsDo
	Not(conds ...gen.Condition) ITagsDo
	Or(conds ...gen.Condition) ITagsDo
	Select(conds ...field.Expr) ITagsDo
	Where(conds ...gen.Condition) ITagsDo
	Order(conds ...field.Expr) ITagsDo
	Distinct(cols ...field.Expr) ITagsDo
	Omit(cols ...field.Expr) ITagsDo
	Join(table schema.Tabler, on ...field.Expr) ITagsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITagsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITagsDo
	Group(cols ...field.Expr) ITagsDo
	Having(conds ...gen.Condition) ITagsDo
	Limit(limit int) ITagsDo
	Offset(offset int) ITagsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITagsDo
	Unscoped() ITagsDo
	Create(values ...*entity.Tags) error
	CreateInBatches(values []*entity.Tags, batchSize int) error
	Save(values ...*entity.Tags) error
	First() (*entity.Tags, error)
	Take() (*entity.Tags, error)
	Last() (*entity.Tags, error)
	Find() ([]*entity.Tags, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Tags, err error)
	FindInBatches(result *[]*entity.Tags, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Tags) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITagsDo
	Assign(attrs ...field.AssignExpr) ITagsDo
	Joins(fields ...field.RelationField) ITagsDo
	Preload(fields ...field.RelationField) ITagsDo
	FirstOrInit() (*entity.Tags, error)
	FirstOrCreate() (*entity.Tags, error)
	FindByPage(offset int, limit int) (result []*entity.Tags, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITagsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tagsDo) Debug() ITagsDo {
	return t.withDO(t.DO.Debug())
}

func (t tagsDo) WithContext(ctx context.Context) ITagsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagsDo) ReadDB() ITagsDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagsDo) WriteDB() ITagsDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagsDo) Session(config *gorm.Session) ITagsDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagsDo) Clauses(conds ...clause.Expression) ITagsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagsDo) Returning(value interface{}, columns ...string) ITagsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagsDo) Not(conds ...gen.Condition) ITagsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagsDo) Or(conds ...gen.Condition) ITagsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagsDo) Select(conds ...field.Expr) ITagsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagsDo) Where(conds ...gen.Condition) ITagsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITagsDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tagsDo) Order(conds ...field.Expr) ITagsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagsDo) Distinct(cols ...field.Expr) ITagsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagsDo) Omit(cols ...field.Expr) ITagsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagsDo) Join(table schema.Tabler, on ...field.Expr) ITagsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITagsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagsDo) RightJoin(table schema.Tabler, on ...field.Expr) ITagsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagsDo) Group(cols ...field.Expr) ITagsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagsDo) Having(conds ...gen.Condition) ITagsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagsDo) Limit(limit int) ITagsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagsDo) Offset(offset int) ITagsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITagsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagsDo) Unscoped() ITagsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagsDo) Create(values ...*entity.Tags) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagsDo) CreateInBatches(values []*entity.Tags, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagsDo) Save(values ...*entity.Tags) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagsDo) First() (*entity.Tags, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Tags), nil
	}
}

func (t tagsDo) Take() (*entity.Tags, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Tags), nil
	}
}

func (t tagsDo) Last() (*entity.Tags, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Tags), nil
	}
}

func (t tagsDo) Find() ([]*entity.Tags, error) {
	result, err := t.DO.Find()
	return result.([]*entity.Tags), err
}

func (t tagsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Tags, err error) {
	buf := make([]*entity.Tags, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagsDo) FindInBatches(result *[]*entity.Tags, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagsDo) Attrs(attrs ...field.AssignExpr) ITagsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagsDo) Assign(attrs ...field.AssignExpr) ITagsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagsDo) Joins(fields ...field.RelationField) ITagsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagsDo) Preload(fields ...field.RelationField) ITagsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagsDo) FirstOrInit() (*entity.Tags, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Tags), nil
	}
}

func (t tagsDo) FirstOrCreate() (*entity.Tags, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Tags), nil
	}
}

func (t tagsDo) FindByPage(offset int, limit int) (result []*entity.Tags, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagsDo) Delete(models ...*entity.Tags) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagsDo) withDO(do gen.Dao) *tagsDo {
	t.DO = *do.(*gen.DO)
	return t
}
