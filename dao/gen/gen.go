// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Article      *article
	Article_path *article_path
	Article_tags *article_tags
	Category     *category
	Menuchild    *menuchild
	Tags         *tags
	User         *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Article = &Q.Article
	Article_path = &Q.Article_path
	Article_tags = &Q.Article_tags
	Category = &Q.Category
	Menuchild = &Q.Menuchild
	Tags = &Q.Tags
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Article:      newArticle(db, opts...),
		Article_path: newArticle_path(db, opts...),
		Article_tags: newArticle_tags(db, opts...),
		Category:     newCategory(db, opts...),
		Menuchild:    newMenuchild(db, opts...),
		Tags:         newTags(db, opts...),
		User:         newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Article      article
	Article_path article_path
	Article_tags article_tags
	Category     category
	Menuchild    menuchild
	Tags         tags
	User         user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Article:      q.Article.clone(db),
		Article_path: q.Article_path.clone(db),
		Article_tags: q.Article_tags.clone(db),
		Category:     q.Category.clone(db),
		Menuchild:    q.Menuchild.clone(db),
		Tags:         q.Tags.clone(db),
		User:         q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Article:      q.Article.replaceDB(db),
		Article_path: q.Article_path.replaceDB(db),
		Article_tags: q.Article_tags.replaceDB(db),
		Category:     q.Category.replaceDB(db),
		Menuchild:    q.Menuchild.replaceDB(db),
		Tags:         q.Tags.replaceDB(db),
		User:         q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Article      IArticleDo
	Article_path IArticle_pathDo
	Article_tags IArticle_tagsDo
	Category     ICategoryDo
	Menuchild    IMenuchildDo
	Tags         ITagsDo
	User         IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Article:      q.Article.WithContext(ctx),
		Article_path: q.Article_path.WithContext(ctx),
		Article_tags: q.Article_tags.WithContext(ctx),
		Category:     q.Category.WithContext(ctx),
		Menuchild:    q.Menuchild.WithContext(ctx),
		Tags:         q.Tags.WithContext(ctx),
		User:         q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
