// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"blog/model/entity"
)

func newAnother_for_unit_test(db *gorm.DB, opts ...gen.DOOption) another_for_unit_test {
	_another_for_unit_test := another_for_unit_test{}

	_another_for_unit_test.another_for_unit_testDo.UseDB(db, opts...)
	_another_for_unit_test.another_for_unit_testDo.UseModel(&entity.Another_for_unit_test{})

	tableName := _another_for_unit_test.another_for_unit_testDo.TableName()
	_another_for_unit_test.ALL = field.NewAsterisk(tableName)
	_another_for_unit_test.ID = field.NewUint64(tableName, "id")

	_another_for_unit_test.fillFieldMap()

	return _another_for_unit_test
}

type another_for_unit_test struct {
	another_for_unit_testDo

	ALL field.Asterisk
	ID  field.Uint64

	fieldMap map[string]field.Expr
}

func (a another_for_unit_test) Table(newTableName string) *another_for_unit_test {
	a.another_for_unit_testDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a another_for_unit_test) As(alias string) *another_for_unit_test {
	a.another_for_unit_testDo.DO = *(a.another_for_unit_testDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *another_for_unit_test) updateTableName(table string) *another_for_unit_test {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint64(table, "id")

	a.fillFieldMap()

	return a
}

func (a *another_for_unit_test) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *another_for_unit_test) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 1)
	a.fieldMap["id"] = a.ID
}

func (a another_for_unit_test) clone(db *gorm.DB) another_for_unit_test {
	a.another_for_unit_testDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a another_for_unit_test) replaceDB(db *gorm.DB) another_for_unit_test {
	a.another_for_unit_testDo.ReplaceDB(db)
	return a
}

type another_for_unit_testDo struct{ gen.DO }

type IAnother_for_unit_testDo interface {
	gen.SubQuery
	Debug() IAnother_for_unit_testDo
	WithContext(ctx context.Context) IAnother_for_unit_testDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnother_for_unit_testDo
	WriteDB() IAnother_for_unit_testDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnother_for_unit_testDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnother_for_unit_testDo
	Not(conds ...gen.Condition) IAnother_for_unit_testDo
	Or(conds ...gen.Condition) IAnother_for_unit_testDo
	Select(conds ...field.Expr) IAnother_for_unit_testDo
	Where(conds ...gen.Condition) IAnother_for_unit_testDo
	Order(conds ...field.Expr) IAnother_for_unit_testDo
	Distinct(cols ...field.Expr) IAnother_for_unit_testDo
	Omit(cols ...field.Expr) IAnother_for_unit_testDo
	Join(table schema.Tabler, on ...field.Expr) IAnother_for_unit_testDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnother_for_unit_testDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnother_for_unit_testDo
	Group(cols ...field.Expr) IAnother_for_unit_testDo
	Having(conds ...gen.Condition) IAnother_for_unit_testDo
	Limit(limit int) IAnother_for_unit_testDo
	Offset(offset int) IAnother_for_unit_testDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnother_for_unit_testDo
	Unscoped() IAnother_for_unit_testDo
	Create(values ...*entity.Another_for_unit_test) error
	CreateInBatches(values []*entity.Another_for_unit_test, batchSize int) error
	Save(values ...*entity.Another_for_unit_test) error
	First() (*entity.Another_for_unit_test, error)
	Take() (*entity.Another_for_unit_test, error)
	Last() (*entity.Another_for_unit_test, error)
	Find() ([]*entity.Another_for_unit_test, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Another_for_unit_test, err error)
	FindInBatches(result *[]*entity.Another_for_unit_test, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Another_for_unit_test) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnother_for_unit_testDo
	Assign(attrs ...field.AssignExpr) IAnother_for_unit_testDo
	Joins(fields ...field.RelationField) IAnother_for_unit_testDo
	Preload(fields ...field.RelationField) IAnother_for_unit_testDo
	FirstOrInit() (*entity.Another_for_unit_test, error)
	FirstOrCreate() (*entity.Another_for_unit_test, error)
	FindByPage(offset int, limit int) (result []*entity.Another_for_unit_test, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnother_for_unit_testDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a another_for_unit_testDo) Debug() IAnother_for_unit_testDo {
	return a.withDO(a.DO.Debug())
}

func (a another_for_unit_testDo) WithContext(ctx context.Context) IAnother_for_unit_testDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a another_for_unit_testDo) ReadDB() IAnother_for_unit_testDo {
	return a.Clauses(dbresolver.Read)
}

func (a another_for_unit_testDo) WriteDB() IAnother_for_unit_testDo {
	return a.Clauses(dbresolver.Write)
}

func (a another_for_unit_testDo) Session(config *gorm.Session) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Session(config))
}

func (a another_for_unit_testDo) Clauses(conds ...clause.Expression) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a another_for_unit_testDo) Returning(value interface{}, columns ...string) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a another_for_unit_testDo) Not(conds ...gen.Condition) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a another_for_unit_testDo) Or(conds ...gen.Condition) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a another_for_unit_testDo) Select(conds ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a another_for_unit_testDo) Where(conds ...gen.Condition) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a another_for_unit_testDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAnother_for_unit_testDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a another_for_unit_testDo) Order(conds ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a another_for_unit_testDo) Distinct(cols ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a another_for_unit_testDo) Omit(cols ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a another_for_unit_testDo) Join(table schema.Tabler, on ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a another_for_unit_testDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a another_for_unit_testDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a another_for_unit_testDo) Group(cols ...field.Expr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a another_for_unit_testDo) Having(conds ...gen.Condition) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a another_for_unit_testDo) Limit(limit int) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a another_for_unit_testDo) Offset(offset int) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a another_for_unit_testDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a another_for_unit_testDo) Unscoped() IAnother_for_unit_testDo {
	return a.withDO(a.DO.Unscoped())
}

func (a another_for_unit_testDo) Create(values ...*entity.Another_for_unit_test) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a another_for_unit_testDo) CreateInBatches(values []*entity.Another_for_unit_test, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a another_for_unit_testDo) Save(values ...*entity.Another_for_unit_test) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a another_for_unit_testDo) First() (*entity.Another_for_unit_test, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Another_for_unit_test), nil
	}
}

func (a another_for_unit_testDo) Take() (*entity.Another_for_unit_test, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Another_for_unit_test), nil
	}
}

func (a another_for_unit_testDo) Last() (*entity.Another_for_unit_test, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Another_for_unit_test), nil
	}
}

func (a another_for_unit_testDo) Find() ([]*entity.Another_for_unit_test, error) {
	result, err := a.DO.Find()
	return result.([]*entity.Another_for_unit_test), err
}

func (a another_for_unit_testDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Another_for_unit_test, err error) {
	buf := make([]*entity.Another_for_unit_test, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a another_for_unit_testDo) FindInBatches(result *[]*entity.Another_for_unit_test, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a another_for_unit_testDo) Attrs(attrs ...field.AssignExpr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a another_for_unit_testDo) Assign(attrs ...field.AssignExpr) IAnother_for_unit_testDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a another_for_unit_testDo) Joins(fields ...field.RelationField) IAnother_for_unit_testDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a another_for_unit_testDo) Preload(fields ...field.RelationField) IAnother_for_unit_testDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a another_for_unit_testDo) FirstOrInit() (*entity.Another_for_unit_test, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Another_for_unit_test), nil
	}
}

func (a another_for_unit_testDo) FirstOrCreate() (*entity.Another_for_unit_test, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Another_for_unit_test), nil
	}
}

func (a another_for_unit_testDo) FindByPage(offset int, limit int) (result []*entity.Another_for_unit_test, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a another_for_unit_testDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a another_for_unit_testDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a another_for_unit_testDo) Delete(models ...*entity.Another_for_unit_test) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *another_for_unit_testDo) withDO(do gen.Dao) *another_for_unit_testDo {
	a.DO = *do.(*gen.DO)
	return a
}
